{
  "title": "2.1: Base Modules: Overview",
  "id": "V3NMqSlAlmTrQQsqPrn/3cae2QpEanPinyP7FqTGTd4=",
  "originalId": 4295,
  "position": 4,
  "steps": [
    {
      "type": "textOnly",
      "description": "Each **base contract** implements a **core primitive** and plugs into the **module registry** via a **matching interface**.",
      "title": "",
      "id": "52344"
    },
    {
      "type": "highlight",
      "description": "The `src/contracts/modules/base` directory contains base contract implementations for network management (`NetworkManager.sol`), permission checking (`PermissionManager.sol`), and EIP-712 utilities (`OzEIP712.sol`).",
      "file": "middleware-sdk/src/contracts/modules/base/NetworkManager.sol",
      "highlight": [
        {
          "start": 1,
          "end": 1
        }
      ],
      "title": "",
      "id": "52346"
    },
    {
      "type": "highlight",
      "description": "The `src/interfaces/modules/base` directory contains the corresponding interfaces for the base module contracts: `INetworkManager.sol`, `IPermissionManager.sol`, and `IOzEIP712.sol`.",
      "file": "middleware-sdk/src/interfaces/modules/base/INetworkManager.sol",
      "highlight": [
        {
          "start": 1,
          "end": 1
        }
      ],
      "title": "",
      "id": "52348"
    },
    {
      "type": "highlight",
      "description": "This contract uses unstructured storage to manage network context.\n\n`NetworkManagerLocation` defines a fixed storage slot for `NetworkManager`'s data, a pattern to prevent storage collisions in upgradeable contracts.\n\nThe `__NetworkManager_init` function initializes this module by writing the network and subnetwork IDs to this designated storage location.",
      "file": "middleware-sdk/src/contracts/modules/base/NetworkManager.sol",
      "highlight": [
        {
          "start": 14,
          "end": 33
        }
      ],
      "title": "",
      "id": "52353"
    },
    {
      "type": "highlight",
      "description": "These public getters retrieve the network context initialized in the previous step.\n\n- `NETWORK()` returns the network's contract address.\n- `SUBNETWORK_IDENTIFIER()` returns the subnetwork's ID.\n- `SUBNETWORK()` computes a unique `bytes32` identifier from the network address and subnetwork ID.\n\nThese functions are critical for any module logic that needs to be aware of its on-chain environment.",
      "file": "middleware-sdk/src/contracts/modules/base/NetworkManager.sol",
      "highlight": [
        {
          "start": 38,
          "end": 54
        }
      ],
      "title": "",
      "id": "52351"
    },
    {
      "type": "highlight",
      "description": "This abstract contract provides a standard hook for permissioning. The `checkPermission` modifier delegates its logic to the `_checkPermission` function.\n\nBy marking `_checkPermission` as `internal virtual`, inheriting contracts are forced to provide the specific access control logic. This establishes a reusable and extensible permissioning pattern for modules.",
      "file": "middleware-sdk/src/contracts/modules/base/PermissionManager.sol",
      "highlight": [
        {
          "start": 9,
          "end": 14
        }
      ],
      "title": "",
      "id": "52358"
    },
    {
      "type": "highlight",
      "description": "The `__OzEIP712_init` function initializes the EIP-712 domain separator by calling OpenZeppelin's `__EIP712_init` with a given name and version. This establishes the unique domain for signed typed data, which is fundamental for secure signature verification within modules that use this base contract.",
      "file": "middleware-sdk/src/contracts/modules/base/OzEIP712.sol",
      "highlight": [
        {
          "start": 14,
          "end": 19
        }
      ],
      "title": "",
      "id": "52354"
    },
    {
      "type": "highlight",
      "description": "This contract provides two EIP-712 hashing utilities.\n\n`hashTypedDataV4` is the standard implementation from OpenZeppelin, producing a hash tied to the current chain and contract.\n\n`hashTypedDataV4CrossChain` produces a chain-agnostic hash by using a domain separator that omits `chainId` and `verifyingContract`. This allows for verifying signatures across different chains.",
      "file": "middleware-sdk/src/contracts/modules/base/OzEIP712.sol",
      "highlight": [
        {
          "start": 24,
          "end": 39
        }
      ],
      "title": "",
      "id": "52356"
    },
    {
      "type": "highlight",
      "description": "The `INetworkManager` interface defines the external API for network context. These getters are used by modules to operate within the correct on-chain environment.\n\n- `NETWORK()` returns the network address.\n- `SUBNETWORK_IDENTIFIER()` returns the subnetwork's ID.\n- `SUBNETWORK()` returns a composite `bytes32` identifier for the network/subnetwork pair, used for unique identification.",
      "file": "middleware-sdk/src/interfaces/modules/base/INetworkManager.sol",
      "highlight": [
        {
          "start": 41,
          "end": 54
        }
      ],
      "title": "",
      "id": "52364"
    },
    {
      "type": "highlight",
      "description": "This interface exposes two EIP-712 hashing utilities:\n\n- `hashTypedDataV4`: Standard EIP-712 hashing, creating a hash specific to the current chain and contract.\n- `hashTypedDataV4CrossChain`: A variant for cross-chain operations. By omitting `chainId` and `verifyingContract` from the domain separator, it produces signatures that are verifiable across different chains.",
      "file": "middleware-sdk/src/interfaces/modules/base/IOzEIP712.sol",
      "highlight": [
        {
          "start": 29,
          "end": 41
        }
      ],
      "title": "",
      "id": "52359"
    },
    {
      "type": "highlight",
      "description": "This is a marker interface. Since the core logic in `PermissionManager` is `internal`, this interface is empty. It's used for type-checking within the module registry to identify contracts that implement permissioning.",
      "file": "middleware-sdk/src/interfaces/modules/base/IPermissionManager.sol",
      "highlight": [
        {
          "start": 4,
          "end": 4
        }
      ],
      "title": "",
      "id": "52361"
    },
    {
      "type": "textOnly",
      "description": "This completes the Base Modules overview. Youâ€™ve seen directory structure, storage layout, initialization flows, access-control hooks, and **EIP-712** utilities, each tied to a matching `interface`.",
      "title": "",
      "id": "52366"
    }
  ]
}